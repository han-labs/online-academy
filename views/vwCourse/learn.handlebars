<div class="container-fluid">
    <div class="row">
        <!-- Sidebar Curriculum -->
        <div class="col-lg-3 bg-light border-end" style="height: 100vh; overflow-y: auto;">
            <div class="p-3">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="mb-0">N·ªôi dung kh√≥a h·ªçc</h5>
                    <a href="/courses/{{course.id}}" class="btn btn-outline-secondary btn-sm">
                        <i class="bi bi-x-lg"></i>
                    </a>
                </div>

                <div class="progress mb-3" style="height: 6px;">
                    <div class="progress-bar" role="progressbar" style="width: {{progress.percentage}}%"
                        aria-valuenow="{{progress.percentage}}" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <small class="text-muted">{{progress.completed}}/{{progress.total}} b√†i h·ªçc
                    ({{progress.percentage}}%)</small>

                <div class="mt-4">
                    {{#each chapters}}
                    <div class="mb-3">
                        <h6 class="fw-bold">{{this.title}}</h6>
                        <div class="ps-3">
                            {{#each this.lectures}}
                            <div class="d-flex align-items-center mb-2">
                                {{#if (contains ../completedLectureIds this.id)}}
                                <i class="bi bi-check-circle-fill text-success me-2"></i>
                                {{else}}
                                <i class="bi bi-play-circle text-muted me-2"></i>
                                {{/if}}
                                <a href="#" class="lecture-link text-decoration-none text-dark small"
                                    data-lecture-id="{{this.id}}" data-video-url="{{this.video_url}}"
                                    data-lecture-title="{{this.title}}" data-duration="{{this.duration_minutes}}">
                                    {{this.title}}
                                </a>
                                <span class="text-muted small ms-2">{{this.duration_minutes}} ph√∫t</span>
                            </div>
                            {{/each}}
                        </div>
                    </div>
                    {{/each}}
                </div>
            </div>
        </div>

        <!-- Main Video Area -->
        <div class="col-lg-9">
            <div class="p-4">
                <!-- Course Header -->
                <div class="mb-4">
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="/">Trang ch·ªß</a></li>
                            <li class="breadcrumb-item"><a href="/courses/{{course.id}}">{{course.title}}</a></li>
                            <li class="breadcrumb-item active">H·ªçc</li>
                        </ol>
                    </nav>
                </div>

                <!-- Video Player -->
                <!-- Video Player -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h4 id="current-lecture-title" class="mb-0">Ch·ªçn b√†i h·ªçc ƒë·ªÉ b·∫Øt ƒë·∫ßu</h4>
                    </div>
                    <div class="card-body p-0">
                        <!-- Plyr.io Player Container -->
                        <div id="video-container" class="ratio ratio-16x9 bg-dark" >
                            <!-- Placeholder -->
                            <div id="video-placeholder"
                                class="d-flex flex-column justify-content-center align-items-center text-white">
                                
                                
                            </div>

                            <!-- ‚úÖ PLYR.IO PLAYER -->
                            <div class="plyr__video-embed" id="plyr-player" style="display: none;">
                                <iframe></iframe>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Lecture Info -->
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Th√¥ng tin b√†i h·ªçc</h5>
                        <div id="lecture-nav" style="display: none;">
                            <button id="prev-lecture" class="btn btn-outline-primary btn-sm me-2">
                                <i class="bi bi-chevron-left"></i> B√†i tr∆∞·ªõc
                            </button>
                            <button id="next-lecture" class="btn btn-primary btn-sm">
                                B√†i sau <i class="bi bi-chevron-right"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="lecture-info">
                            <p class="text-muted mb-0">Ch∆∞a c√≥ b√†i h·ªçc n√†o ƒë∆∞·ª£c ch·ªçn</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Debug logs - ƒê√É S·ª¨A SYNTAX
    console.log('üîç DEBUG - completedLectureIds t·ª´ server:', [{{#each completedLectureIds}}{{this}},{{/each}}]);
    console.log('üîç DEBUG - Progress data:', {
        completed: {{progress.completed}},
        total: {{progress.total}}, 
        percentage: {{progress.percentage}}
    });

    // Global variables - ƒê√É S·ª¨A SYNTAX
    const allLectures = [
        {{#each chapters}}
        {{#each this.lectures}}
        {
            id: {{this.id}},
            title: "{{this.title}}",
            video_url: "{{this.video_url}}",
            duration: {{this.duration_minutes}},
            chapter_id: {{this.chapter_id}}
        },
        {{/each}}
        {{/each}}
    ];

    let completedLectureIds = [{{#each completedLectureIds}}{{this}},{{/each}}];
    let currentLectureIndex = -1;
    let currentLectureId = null;

    console.log('üîç DEBUG - completedLectureIds sau init:', completedLectureIds);
    console.log('üîç DEBUG - allLectures:', allLectures);

    // Extract YouTube ID t·ª´ URL
    function getYouTubeId(url) {
        const regex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
        const match = url.match(regex);
        return match ? match[1] : null;
    }

    // Mark lecture as completed
    function markLectureAsCompleted(lectureId) {
        fetch('/api/progress/complete', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                lecture_id: lectureId
            })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                console.log('‚úÖ B√†i h·ªçc ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u ho√†n th√†nh');
                updateProgressUI(lectureId);
                updateProgressBar();
            }
        })
        .catch(error => console.error('Error:', error));
    }

    // Update progress bar
    async function updateProgressBar() {
        try {
            const response = await fetch(`/api/progress/{{course.id}}`);
            const data = await response.json();
            
            if (data.success) {
                const progress = data.data;
                
                const progressBar = document.querySelector('.progress-bar');
                const progressText = document.querySelector('.text-muted');
                
                if (progressBar) {
                    progressBar.style.width = `${progress.percentage}%`;
                    progressBar.setAttribute('aria-valuenow', progress.percentage);
                }
                
                if (progressText) {
                    progressText.textContent = `${progress.completed}/${progress.total} b√†i h·ªçc (${progress.percentage}%)`;
                }
                
                console.log('üìä Progress bar updated:', progress);
            }
        } catch (error) {
            console.error('Error updating progress bar:', error);
        }
    }

    // Refresh completed lectures
    async function refreshCompletedLectures() {
        try {
            const response = await fetch(`/api/progress/completed/{{course.id}}`);
            const data = await response.json();
            
            if (data.success) {
                completedLectureIds = data.data;
                console.log('üîÑ Completed lectures refreshed:', completedLectureIds);
                
                document.querySelectorAll('.lecture-link').forEach(link => {
                    const lectureId = parseInt(link.getAttribute('data-lecture-id'));
                    if (completedLectureIds.includes(lectureId)) {
                        const lectureItem = link.closest('.d-flex');
                        const icon = lectureItem.querySelector('i');
                        if (icon) {
                            icon.className = 'bi bi-check-circle-fill text-success me-2';
                        }
                    }
                });
            }
        } catch (error) {
            console.error('Error refreshing completed lectures:', error);
        }
    }

    // Update UI
    function updateProgressUI(lectureId) {
        const lectureLink = document.querySelector(`[data-lecture-id="${lectureId}"]`);
        if (lectureLink) {
            const lectureItem = lectureLink.closest('.d-flex');
            const icon = lectureItem.querySelector('i');
            if (icon) {
                icon.className = 'bi bi-check-circle-fill text-success me-2';
            }
        }
        
        if (!completedLectureIds.includes(lectureId)) {
            completedLectureIds.push(lectureId);
            console.log('üìù Completed lectures updated:', completedLectureIds);
        }
    }

    // Load video v·ªõi Plyr.io + YouTube
    function loadVideoWithPlyr(lectureId, videoUrl, lectureTitle) {
        console.log('üîç DEBUG - Loading video with Plyr:', lectureId, videoUrl);
        
        document.getElementById('video-placeholder').style.display = 'none';
        document.getElementById('plyr-player').style.display = 'block';

        const youtubeId = getYouTubeId(videoUrl);
        console.log('üîç DEBUG - YouTube ID:', youtubeId);
        
        if (!youtubeId) {
            console.error('‚ùå Invalid YouTube URL:', videoUrl);
            return;
        }

        // YouTube embed URL cho Plyr
        const embedUrl = `https://www.youtube.com/embed/${youtubeId}`;
        
        // Kh·ªüi t·∫°o Plyr player
        if (window.coursePlayer) {
            window.coursePlayer.destroy();
        }

        const iframe = document.querySelector('#plyr-player iframe');
        iframe.src = embedUrl;

        window.coursePlayer = new Plyr('#plyr-player', {
            youtube: {
                noCookie: true,
                rel: 0,
                showinfo: 0,
                iv_load_policy: 3,
                modestbranding: 1
            },
            autoplay: true
        });

        // Auto mark completed khi video ends
        window.coursePlayer.on('ended', () => {
            console.log('üé¨ Video ended - Auto marking completed');
            if (currentLectureId) {
                markLectureAsCompleted(currentLectureId);
                
                // Auto advance to next lecture
                if (currentLectureIndex < allLectures.length - 1) {
                    setTimeout(() => {
                        const nextLecture = allLectures[currentLectureIndex + 1];
                        simulateLectureClick(nextLecture.id);
                    }, 2000);
                }
            }
        });

        currentLectureId = lectureId;
        console.log('‚úÖ Plyr.io + YouTube loaded successfully');
    }

    // Load video when click lecture
    document.querySelectorAll('.lecture-link').forEach((link, index) => {
        link.addEventListener('click', function (e) {
            e.preventDefault();

            const lectureId = parseInt(this.getAttribute('data-lecture-id'));
            const videoUrl = this.getAttribute('data-video-url');
            const lectureTitle = this.getAttribute('data-lecture-title');
            const duration = this.getAttribute('data-duration');

            currentLectureIndex = allLectures.findIndex(lecture => lecture.id === lectureId);

            document.getElementById('current-lecture-title').textContent = lectureTitle;
            document.getElementById('lecture-nav').style.display = 'flex';

            document.getElementById('lecture-info').innerHTML = `
                <h6>${lectureTitle}</h6>
                <p class="text-muted">Th·ªùi l∆∞·ª£ng: ${duration} ph√∫t</p>
                <p>B√†i h·ªçc n√†y l√† m·ªôt ph·∫ßn c·ªßa ch∆∞∆°ng tr√¨nh kh√≥a h·ªçc</p>
            `;

            if (videoUrl) {
                loadVideoWithPlyr(lectureId, videoUrl, lectureTitle);
            }

            markLectureAsCompleted(lectureId);
        });
    });

    // Navigation
    document.getElementById('prev-lecture').addEventListener('click', () => {
        if (currentLectureIndex > 0) {
            const prevLecture = allLectures[currentLectureIndex - 1];
            simulateLectureClick(prevLecture.id);
        }
    });

    document.getElementById('next-lecture').addEventListener('click', () => {
        if (currentLectureIndex < allLectures.length - 1) {
            const nextLecture = allLectures[currentLectureIndex + 1];
            simulateLectureClick(nextLecture.id);
        }
    });

    function simulateLectureClick(lectureId) {
        const lectureLink = document.querySelector(`[data-lecture-id="${lectureId}"]`);
        if (lectureLink) {
            lectureLink.click();
        }
    }

    // Initialize on load
    document.addEventListener('DOMContentLoaded', function() {
        refreshCompletedLectures();
    });
</script>